/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.04.2023 09:36:13

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3616;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[21];
TfLiteEvalTensor tflEvalTensors[21];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[10];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,104 } };
const TfArray<1, float> quant0_scale = { 1, { 0.38646602630615234, } };
const TfArray<1, int> quant0_zero = { 1, { -102 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 104, 1, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 416, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ -92, 72, -93, 
  /* [0][1][][] */ 69, 127, -74, 
  /* [0][2][][] */ 46, 127, 78, 
  /* [1][0][][] */ 14, -25, -46, 
  /* [1][1][][] */ -58, -13, 1, 
  /* [1][2][][] */ 9, -127, -17, 
  /* [2][0][][] */ -1, -115, -65, 
  /* [2][1][][] */ 87, -127, -76, 
  /* [2][2][][] */ -92, 65, -35, 
  /* [3][0][][] */ -100, 110, -30, 
  /* [3][1][][] */ 100, 127, -82, 
  /* [3][2][][] */ -5, 127, -24, 
  /* [4][0][][] */ 1, 42, -75, 
  /* [4][1][][] */ 44, 127, -65, 
  /* [4][2][][] */ 18, 45, -103, 
  /* [5][0][][] */ 80, 52, 36, 
  /* [5][1][][] */ 30, -24, -30, 
  /* [5][2][][] */ -46, -127, 78, 
  /* [6][0][][] */ -96, -120, -126, 
  /* [6][1][][] */ -106, -81, -16, 
  /* [6][2][][] */ 127, 41, -96, 
  /* [7][0][][] */ -41, -127, -33, 
  /* [7][1][][] */ 67, 86, -83, 
  /* [7][2][][] */ -38, 43, -22, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0021737175993621349, 0.0026040361262857914, 0.0027919868007302284, 0.002616208977997303, 0.0025031438563019037, 0.0016989399446174502, 0.0021048928610980511, 0.0021925640758126974, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { 113, -30, 4, -94, -241, 111, -123, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.0008400679798796773, 0.0010063714580610394, 0.0010790080996230245, 0.0010110759176313877, 0.00096738006686791778, 0.00065658258972689509, 0.00081346958177164197, 0.00084735150448977947, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ -51,-25,-40,74,-28,-67,68,-36, 103,-49,-103,15,4,-127,13,-54, 48,-50,62,55,28,69,58,7, 
  /* [0][1][][] */ 71,-23,-48,65,-3,-34,-52,65, 29,-97,82,40,-36,-108,-25,-73, -63,32,-73,30,63,51,23,27, 
  /* [0][2][][] */ 11,0,-69,74,35,-62,9,57, 83,-38,-68,50,45,-63,-106,-37, -74,-2,-66,12,-38,30,20,77, 
  /* [1][0][][] */ -54,75,-68,-61,2,-30,55,32, -105,-12,-8,-27,-77,61,10,6, 49,73,25,75,54,-20,-55,14, 
  /* [1][1][][] */ 79,-79,-9,61,43,30,14,27, -45,75,127,-3,20,15,-16,-61, -29,-18,86,-13,-17,-55,68,80, 
  /* [1][2][][] */ 77,-11,55,59,-71,6,-55,-47, -83,51,-24,-47,-40,-85,-46,-66, -47,28,9,42,56,-42,78,-9, 
  /* [2][0][][] */ -56,47,-55,-44,9,57,-52,-70, 71,-21,-54,79,34,1,-83,45, -20,-56,-31,-61,11,18,30,6, 
  /* [2][1][][] */ 45,45,67,74,35,63,0,-47, 20,-99,-18,-42,1,-67,15,5, 34,-12,49,61,1,35,-58,51, 
  /* [2][2][][] */ 7,35,58,-36,33,66,39,-1, 56,-83,-29,56,28,-127,-26,-31, 19,69,47,-34,-53,-38,28,56, 
  /* [3][0][][] */ -60,29,8,8,-27,79,-32,86, 0,9,51,115,93,118,103,-15, 2,-84,47,13,-38,59,68,-41, 
  /* [3][1][][] */ 0,-78,-30,85,74,-29,-6,90, 4,111,108,27,-4,39,57,-2, -28,-24,-35,28,2,-5,-3,22, 
  /* [3][2][][] */ -92,-78,54,86,-70,70,-74,-88, -117,101,103,27,-60,-19,127,-94, -55,35,43,-87,-4,68,67,77, 
  /* [4][0][][] */ 11,21,57,-1,41,-43,-23,43, -127,-20,42,-76,-106,-70,51,110, 66,-61,61,65,-38,66,-45,64, 
  /* [4][1][][] */ -20,30,-67,-2,-47,-12,-68,-64, -41,-1,-7,-56,28,112,-92,2, -23,-69,-24,57,-66,-12,-15,-13, 
  /* [4][2][][] */ 0,-28,12,14,-71,-8,-57,3, 52,77,-63,66,-34,26,-12,90, -17,55,66,-2,65,-13,-24,-49, 
  /* [5][0][][] */ 48,-40,-76,37,56,76,13,74, -7,-30,-103,84,82,127,-99,-18, -24,4,34,0,51,2,-58,49, 
  /* [5][1][][] */ -66,52,38,11,-78,-43,-8,69, -54,36,58,-59,7,46,3,-24, -46,83,-1,26,-36,13,81,52, 
  /* [5][2][][] */ -51,-80,9,77,-44,76,-80,-6, -11,106,37,-44,68,71,89,-6, -67,2,47,54,19,62,57,1, 
  /* [6][0][][] */ 58,18,34,63,13,31,-43,54, 17,-18,35,-83,-52,59,-21,-124, -38,57,-3,-27,46,-44,-9,-20, 
  /* [6][1][][] */ 15,10,-3,-57,-72,16,13,-39, 127,3,-51,98,39,62,70,-7, -57,8,-8,-11,-20,30,19,-61, 
  /* [6][2][][] */ -6,3,15,-2,44,59,-21,76, 49,49,-66,-15,-53,83,-16,61, 21,15,-49,26,46,22,10,62, 
  /* [7][0][][] */ -50,-56,71,-18,-41,80,71,28, 30,-90,-61,21,65,31,66,-127, -86,-81,-58,9,51,20,-45,69, 
  /* [7][1][][] */ 40,11,-63,43,75,76,3,-34, -31,91,108,43,27,-28,28,-52, 48,-89,-54,83,85,-13,11,-82, 
  /* [7][2][][] */ 59,76,90,21,47,-83,-70,59, -59,-21,-20,94,-61,-67,-30,6, 50,11,91,-91,-5,11,-18,30, 
  /* [8][0][][] */ -50,-40,62,-21,-33,-16,4,67, 25,-34,-57,104,77,13,48,74, 3,-57,40,-69,-12,-48,67,27, 
  /* [8][1][][] */ -29,-64,-49,-38,43,-66,14,41, 87,-45,8,16,96,88,-25,96, -28,47,-29,51,-45,-11,38,0, 
  /* [8][2][][] */ 2,-9,-53,66,-72,-73,30,13, -101,68,32,-127,-110,-27,-46,-70, -25,-6,-56,-10,-54,-48,-35,-33, 
  /* [9][0][][] */ -26,-75,23,-15,71,72,-97,-22, 7,118,127,-82,43,67,122,-61, -78,-3,77,13,20,-20,45,23, 
  /* [9][1][][] */ -72,57,40,91,77,10,-27,-63, 6,58,41,20,-33,60,78,-14, -25,-32,-24,-3,57,47,-95,42, 
  /* [9][2][][] */ 3,6,18,-13,-31,84,38,78, -62,-2,-87,-65,68,6,43,31, 78,-96,-96,-86,14,45,9,-56, 
  /* [10][0][][] */ -3,9,52,-3,-5,-74,-39,26, 127,41,41,66,118,40,110,-12, 4,-1,-9,-79,-35,-26,76,-31, 
  /* [10][1][][] */ 43,69,51,52,-53,-35,-52,28, 28,-103,-25,12,21,-1,-61,40, -82,69,41,-63,27,-71,-10,78, 
  /* [10][2][][] */ -15,-45,-56,75,20,12,9,28, 5,-60,59,-49,-127,-35,-3,-39, 29,21,69,-66,-58,-72,-56,-64, 
  /* [11][0][][] */ 14,-53,-14,56,-21,-68,60,2, -58,104,104,-74,-67,4,56,123, 43,25,-90,75,85,-76,76,26, 
  /* [11][1][][] */ -31,25,-50,50,14,74,9,17, -38,-5,127,31,6,50,64,-61, 48,-49,-32,-56,9,35,31,24, 
  /* [11][2][][] */ -94,-98,-26,78,62,32,8,-88, 5,-13,11,62,34,-89,-31,22, -77,11,52,50,63,0,73,-39, 
  /* [12][0][][] */ 59,6,-86,-23,40,65,35,-74, -33,-28,127,-25,34,-98,96,46, 1,33,-45,-47,-13,50,5,59, 
  /* [12][1][][] */ -72,55,8,35,38,70,-19,18, 91,10,30,-58,60,24,-102,60, 85,0,-87,32,4,-55,-74,53, 
  /* [12][2][][] */ -32,-59,86,13,-8,4,-26,78, -54,-10,-30,-3,-75,83,-57,-94, -37,44,-26,43,-43,-51,-64,-20, 
  /* [13][0][][] */ -15,17,-55,56,-64,-59,-16,-61, -127,-12,20,-97,-9,34,-77,-5, -28,-75,-50,44,-7,30,55,-33, 
  /* [13][1][][] */ 49,-16,48,1,14,-4,71,38, -54,83,37,-121,-40,124,-35,12, 79,-78,22,-53,-30,-4,74,11, 
  /* [13][2][][] */ 27,21,-9,-21,-27,30,81,1, 23,23,13,-39,39,48,104,-95, -73,11,51,-19,48,36,-11,40, 
  /* [14][0][][] */ 5,14,51,34,-79,81,-46,-82, 61,57,-127,50,107,51,-58,-24, -40,68,50,-58,-6,39,4,-9, 
  /* [14][1][][] */ -70,-1,70,-46,23,-42,48,6, -125,88,34,-65,-85,-24,18,61, 41,82,-74,63,-49,-84,48,-4, 
  /* [14][2][][] */ 42,23,-6,74,-14,-54,-13,54, 71,102,111,-4,57,-62,-24,87, 49,9,76,-26,64,19,5,-54, 
  /* [15][0][][] */ 68,32,-17,53,-46,-78,-64,-15, -61,53,31,-127,38,94,117,-49, 59,-57,36,-69,-28,32,-54,25, 
  /* [15][1][][] */ -2,21,16,-78,-46,-36,17,-28, 18,58,-12,-35,-11,77,44,92, 17,-53,23,-45,-20,72,66,30, 
  /* [15][2][][] */ -64,-18,9,16,36,0,-86,35, 83,73,95,-20,49,22,-9,-37, 47,-20,-51,-11,-21,56,64,75, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0020127338357269764, 0.0019256233936175704, 0.0022237119264900684, 0.0017676021670922637, 0.0022151924204081297, 0.0019967036787420511, 0.0021861295681446791, 0.0017289849929511547, 0.0021634071599692106, 0.0016961931250989437, 0.0019791170489042997, 0.0016929105622693896, 0.0018583056516945362, 0.0020095827057957649, 0.0019520093919709325, 0.0019193803891539574, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { 86, -77, -132, -1660, 724, -308, -71, -431, -514, 86, 587, -102, 79, 521, -673, 143, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 0.00023912226606626064, 0.0002287731331307441, 0.00026418745983392, 0.00020999947446398437, 0.00026317531592212617, 0.00023721781326457858, 0.0002597224956844002, 0.00020541157573461533, 0.00025702296989038587, 0.00020151573698967695, 0.00023512843472417444, 0.00020112576021347195, 0.00022077547328080982, 0.00023874790349509567, 0.00023190792126115412, 0.00022803143656346947, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[32*3*3*16] = { 
  /* [0][0][][] */ -20,11,42,14,-1,-29,38,51,16,-49,-11,32,-62,68,46,-7, 2,62,-53,-24,-53,-45,-26,40,-38,75,-127,82,-40,-14,-55,-20, 58,-12,0,14,-13,32,1,2,-47,28,32,12,-30,-27,-29,51, 
  /* [0][1][][] */ -30,-20,-6,53,2,39,-52,-2,-55,8,66,56,-20,12,-42,36, 26,-48,-21,97,-47,75,87,-8,-67,52,-4,15,-8,-3,24,81, 9,-18,-16,-22,-54,-5,-41,3,64,56,-23,-42,31,-16,61,-42, 
  /* [0][2][][] */ 69,-32,31,60,-52,-34,-32,-25,-58,-24,-61,35,49,-31,27,45, 29,16,-31,-45,-48,-35,-6,20,63,45,53,61,-49,-79,17,51, -51,-4,-42,23,-41,63,57,-59,67,15,-57,-51,-42,64,-52,-52, 
  /* [1][0][][] */ 42,41,-52,39,-39,-31,4,-22,-27,65,7,32,66,28,-5,-58, 73,-11,58,-27,-84,84,91,43,23,88,11,6,61,52,-49,-30, 0,71,34,-51,-46,53,-17,-28,-17,-11,-44,50,-39,19,-71,46, 
  /* [1][1][][] */ -56,52,57,0,11,-39,13,4,10,-56,64,58,28,-28,-31,18, 54,48,68,77,28,29,-21,-2,-30,49,-20,-65,59,-21,12,-6, 35,54,53,-36,-4,-32,31,-69,3,47,45,1,-42,3,-58,15, 
  /* [1][2][][] */ 65,17,8,-9,-30,27,59,64,6,1,-12,-32,-26,-42,62,-62, 8,21,41,-92,-10,-58,37,50,-127,-78,3,-18,-63,-85,1,16, -3,31,54,-15,29,-46,-30,-30,64,-61,47,-7,-65,-25,-10,68, 
  /* [2][0][][] */ -74,21,53,-65,-6,4,34,0,-51,-68,1,30,-38,-69,-66,-22, -33,-26,50,77,-4,5,81,-39,42,-2,22,-5,-56,-79,78,-98, 23,-72,11,-24,59,41,62,-53,-71,6,2,17,56,-25,-38,-51, 
  /* [2][1][][] */ 5,-68,62,52,-54,73,-37,-19,-35,46,-44,14,19,18,-1,-31, 78,-40,70,25,45,-70,-52,-56,-22,-10,83,-21,-109,-26,-30,-127, -42,48,-6,-50,64,-1,-44,72,56,-60,23,-40,65,-70,70,-51, 
  /* [2][2][][] */ -33,23,35,51,-42,19,15,21,42,-27,-8,1,-27,35,-45,-41, -73,-2,2,35,19,61,-58,96,47,-20,-55,-74,-82,-26,46,-86, -66,-55,-35,-12,43,-6,71,-18,25,62,70,-1,44,-48,-34,-45, 
  /* [3][0][][] */ -63,-67,-36,67,44,22,49,-47,44,-3,51,36,41,14,55,41, 32,-39,-32,-19,62,-19,74,-71,50,30,56,-67,45,3,72,-63, 21,36,60,-41,4,27,45,3,-51,-62,68,-46,-20,-47,47,-48, 
  /* [3][1][][] */ 1,-4,26,-12,10,-65,-40,-27,-69,-59,2,-41,-61,-21,-22,-8, -87,9,-7,-100,81,-35,127,-103,-123,73,-19,88,-10,41,-33,67, -8,-69,-17,56,-18,45,-5,-57,-60,-13,44,31,21,52,-11,-24, 
  /* [3][2][][] */ 1,29,-26,-63,-57,-20,29,70,32,47,-18,-64,-41,-42,-13,-64, 12,-59,-44,-59,52,27,-118,47,11,-59,44,-51,-93,-4,-75,-8, -40,-47,26,-25,-25,-42,38,14,-2,-63,47,-7,45,-66,-47,7, 
  /* [4][0][][] */ -6,16,-38,53,7,13,55,-29,11,48,23,-21,-31,49,43,-13, 32,-8,45,-23,-127,-7,70,107,-33,97,-76,-3,-62,74,39,17, 19,-23,-56,-29,-37,-20,55,61,37,-49,5,50,-36,58,-5,49, 
  /* [4][1][][] */ -45,-62,-43,-28,5,-26,-34,-16,5,20,57,49,-54,21,39,54, 21,22,-14,80,84,89,73,45,-7,-2,60,-61,-41,22,-31,60, 5,-59,6,-32,-20,-42,-59,8,9,61,-27,-39,28,7,-27,29, 
  /* [4][2][][] */ -61,-39,-39,-38,38,56,-57,-19,-39,-50,-1,-29,-30,53,-21,31, -45,-46,1,-1,54,-25,-53,44,-48,49,-65,-15,71,61,-22,-38, -58,40,6,-22,20,47,-28,-20,-16,47,-56,-9,41,50,55,14, 
  /* [5][0][][] */ -8,76,65,-17,-38,78,65,52,11,1,71,35,-29,16,8,64, 87,-34,23,86,-81,10,5,-76,94,0,86,-24,-34,75,115,42, -14,1,-80,57,71,-62,8,78,-55,-45,-79,-69,48,62,31,-41, 
  /* [5][1][][] */ 52,-8,-21,-46,-22,63,4,-58,80,-19,-48,-71,-20,-78,-63,6, -15,-55,26,87,-127,16,-7,36,-19,6,-33,-14,-114,-16,-48,-1, 63,-18,33,0,15,11,77,54,-38,69,10,-46,54,-56,-60,51, 
  /* [5][2][][] */ -34,-61,-25,-53,55,14,-6,-43,-40,65,44,40,79,-62,2,49, 15,6,-45,120,61,61,-36,-43,83,-10,-20,-18,106,41,36,-39, 66,38,-64,-31,46,48,79,41,-76,43,21,42,66,34,11,-11, 
  /* [6][0][][] */ -50,-43,-48,8,-53,-25,9,27,20,26,17,2,-28,31,-3,19, 90,-26,45,-62,17,6,20,18,-38,-63,-68,-49,-73,-121,-28,-105, 46,25,-48,-56,14,-2,29,16,15,-40,-12,13,4,18,47,-52, 
  /* [6][1][][] */ 34,30,37,15,-34,-44,-16,-47,-16,-2,-56,-11,12,31,-41,28, 93,-62,87,1,-120,58,-44,-16,18,-111,-8,-127,49,-86,72,-40, -56,-2,35,44,-15,5,27,46,0,50,-7,-48,8,-34,-2,-4, 
  /* [6][2][][] */ 9,-9,27,-23,12,13,-23,-42,-11,7,-25,-10,-29,-44,-26,-24, 38,-58,55,10,-20,-67,48,14,34,-49,-2,38,-68,-61,-25,-63, -34,35,14,-36,47,-44,38,40,54,20,-32,13,-15,-18,43,-6, 
  /* [7][0][][] */ 71,78,2,61,-85,-31,3,-55,61,80,32,64,-44,-72,81,70, 30,-42,-55,-108,-17,-81,-66,-110,-33,32,-66,79,-68,-26,-127,-85, -11,-46,30,-17,39,8,-73,71,57,-25,-21,-29,29,78,-82,15, 
  /* [7][1][][] */ -21,-39,10,22,-5,-73,26,-28,7,-50,-46,32,7,36,52,15, 83,-12,-43,5,-20,30,121,-23,-13,-65,-48,-26,126,-115,76,-22, 27,10,4,-3,-31,-42,-10,-53,51,15,-75,-53,20,77,-60,-53, 
  /* [7][2][][] */ -69,23,49,-81,-12,-16,-4,74,-79,54,-41,-66,-38,36,-7,-38, -2,63,105,-22,56,33,35,61,31,-27,72,78,33,-9,104,6, -18,-34,-42,-44,64,-34,-26,-62,53,-35,34,21,-79,30,7,34, 
  /* [8][0][][] */ 3,19,10,46,40,-42,-3,-40,33,-2,-20,-35,33,-44,49,-7, -77,-6,-97,-6,29,-27,-57,42,37,63,-20,56,-6,0,8,53, -40,26,-40,-5,32,-27,11,10,26,14,-31,2,-14,-49,-40,-3, 
  /* [8][1][][] */ 53,5,-40,36,33,-17,7,-16,-11,17,-33,45,34,-19,-44,-48, -34,16,64,-20,127,-52,25,30,-68,51,-24,5,35,-15,-61,52, 23,31,-26,-25,-35,15,-11,32,-8,-24,36,28,-17,-6,-20,26, 
  /* [8][2][][] */ 43,51,-29,-12,16,-29,-30,12,-23,47,33,-37,48,-39,-1,35, -3,-25,-18,-71,2,4,53,-8,53,-40,45,-82,-50,-81,11,7, 30,35,42,-34,20,-25,23,-27,-54,41,48,29,22,-28,-21,-29, 
  /* [9][0][][] */ 54,-55,-7,-51,-58,9,-3,2,-3,61,61,-59,52,26,53,-49, 51,-79,7,8,-4,9,-8,-8,-5,-64,88,-37,60,19,-55,-20, -14,36,-64,-17,40,47,51,-16,41,33,-53,14,16,10,29,-33, 
  /* [9][1][][] */ 39,36,62,42,-37,58,-13,-22,-17,-34,-50,-19,14,-42,26,13, -10,-38,-21,16,6,41,-112,19,70,9,-24,28,-26,47,20,22, 37,26,-28,-45,-13,33,41,-2,-24,59,-11,19,22,52,-36,-29, 
  /* [9][2][][] */ 9,-38,-55,-38,46,15,9,-19,16,45,57,-41,18,58,19,-17, -41,-121,-46,-96,111,-40,15,-85,-127,6,-11,78,45,-33,-55,0, -8,-44,-3,33,-62,-4,11,-59,55,-17,59,64,-41,-31,-56,61, 
  /* [10][0][][] */ -45,62,-65,44,-57,-13,-62,-60,-3,9,-39,-18,29,-11,42,34, 52,85,6,25,-127,75,-40,2,68,50,-36,-6,84,59,60,2, 2,-64,-54,-31,67,-41,-58,-38,-64,-62,10,-51,45,-64,57,-20, 
  /* [10][1][][] */ -65,12,-16,-20,-18,-53,47,37,-15,30,46,27,-43,-2,58,-44, 33,69,14,78,-50,-54,7,13,-112,-18,-103,104,-51,-30,-62,58, -2,-18,38,2,-37,-47,37,15,62,0,-23,32,-28,26,-44,-30, 
  /* [10][2][][] */ -18,-24,-36,-40,-38,35,-16,-37,-28,66,-24,-39,-15,-19,18,-23, -53,22,61,8,56,83,22,-46,33,16,-22,21,-11,83,-6,0, 10,11,25,61,-53,-56,50,-52,33,54,19,-58,-59,-51,11,52, 
  /* [11][0][][] */ 31,-35,-6,-39,-2,-23,50,-37,-27,-30,17,-12,-57,-47,36,-24, 61,-104,-26,9,10,42,57,8,73,-76,-4,-51,39,-6,2,0, 15,58,25,-37,49,52,54,-26,-3,12,-25,-33,5,-47,15,52, 
  /* [11][1][][] */ 47,18,47,-24,38,-39,51,3,-4,37,19,-45,-41,26,36,-38, -26,-19,-3,19,90,39,-127,-30,48,66,44,-36,16,40,-15,-44, 4,-53,21,-26,20,-4,14,-44,-4,-20,-12,32,-50,45,-42,-21, 
  /* [11][2][][] */ 25,-3,46,5,48,29,-5,53,35,-3,32,47,44,-20,29,-54, -12,5,-41,-99,75,-93,49,-31,-51,15,-35,43,-3,-21,15,27, -17,-48,-30,52,-40,-10,-22,5,52,16,10,-16,-20,-15,-29,-24, 
  /* [12][0][][] */ 24,-10,49,-33,2,26,54,-21,28,-32,-46,49,33,-12,5,-21, 71,37,-35,51,-9,27,-20,40,18,-16,-46,-37,-29,76,-54,-38, -5,-47,-36,-20,-52,19,-5,-51,5,-28,50,-54,-8,-41,-10,-50, 
  /* [12][1][][] */ 48,-45,-25,-39,11,38,-1,24,55,42,20,-31,-29,39,29,-2, 58,-44,38,39,26,88,-25,3,-17,64,38,-18,-65,49,21,-21, -53,-51,-14,26,21,28,-5,1,-12,-29,-54,31,-50,37,-14,-27, 
  /* [12][2][][] */ 8,-6,-18,-51,16,10,-32,40,15,-21,-42,-26,-25,12,42,46, -7,31,-13,13,-127,58,-31,32,-4,18,-25,21,-38,19,79,13, -54,-36,20,0,25,33,31,9,-11,37,25,-37,29,-35,44,29, 
  /* [13][0][][] */ 29,-24,-12,15,45,49,25,24,-38,32,47,9,-24,22,13,-51, 44,0,14,64,-65,-127,17,12,-30,30,12,39,-43,-17,-81,-32, 55,40,45,11,-50,-15,-57,-27,28,-33,-1,-57,34,59,13,54, 
  /* [13][1][][] */ 59,10,-43,-24,50,55,37,-13,-22,56,-61,57,9,-59,-12,12, 102,-65,31,-32,67,82,-43,-32,10,-23,49,5,-32,52,66,-15, -48,52,-13,48,12,-44,35,8,6,59,42,-56,-20,-40,-55,16, 
  /* [13][2][][] */ 30,-60,28,17,9,-20,-21,37,-40,-57,-20,34,61,7,-9,-55, 9,-36,69,-16,-1,37,4,60,-49,26,-12,-31,-21,-19,43,14, 36,-55,23,-57,22,-53,60,-52,0,-4,-23,31,-53,27,61,-21, 
  /* [14][0][][] */ 48,20,38,14,69,-52,-34,-34,69,32,60,-22,11,50,-10,-56, -13,73,-20,13,86,-5,-73,-38,-64,16,84,119,30,-94,-77,-57, 26,36,-10,47,-7,-54,45,-61,-1,-36,-74,-30,-64,-41,-15,61, 
  /* [14][1][][] */ 77,-50,-67,39,1,-1,-43,27,76,-49,25,36,35,15,45,-29, 47,32,-53,-76,-127,-42,-45,72,-11,-44,-75,-68,-27,46,63,74, -54,-50,-78,18,48,16,22,48,-24,-43,16,34,25,-23,-11,-47, 
  /* [14][2][][] */ -29,1,46,45,-59,18,-60,-1,41,-34,-9,33,-10,-32,-37,72, 88,17,50,71,-34,47,44,-18,5,-70,77,-115,102,-47,13,12, 4,-75,-45,-72,-11,60,10,-61,22,-42,63,47,36,-34,-28,-44, 
  /* [15][0][][] */ -2,-43,-65,59,-12,12,28,76,-23,-75,28,29,-39,-31,-42,49, 30,0,59,-53,32,91,18,67,18,25,3,50,63,54,80,7, 71,-39,-42,28,-19,56,-52,1,0,-44,0,48,49,51,-28,12, 
  /* [15][1][][] */ -28,13,-53,-56,-2,76,74,23,-51,-64,-52,-2,-37,8,75,-76, 17,100,-62,-62,-86,-79,-127,-96,-10,-24,39,72,37,49,12,54, 74,-21,-46,65,-29,-35,46,-4,75,40,-53,-19,33,26,50,-68, 
  /* [15][2][][] */ 34,-63,9,65,9,-71,14,-64,-40,-28,-10,37,24,38,-28,63, -106,60,24,55,-20,-37,31,71,-72,55,3,-54,27,-102,-63,32, 0,-56,-55,-31,50,34,-50,-18,60,-34,-65,64,58,-64,-14,-37, 
  /* [16][0][][] */ 0,-51,-59,45,-33,-1,16,23,57,20,-71,-64,44,-67,14,-75, -40,-71,-14,-47,-54,-30,10,48,29,26,-9,1,-49,69,-3,-40, -54,23,62,58,-8,80,-53,-71,34,48,17,8,17,-4,37,45, 
  /* [16][1][][] */ 62,1,-49,-76,-75,51,55,-61,57,-72,24,30,45,-63,67,-75, 87,76,47,82,-59,89,58,50,67,-63,24,64,13,46,49,20, -40,-82,-37,2,39,-69,11,41,-45,-17,-66,-73,-12,-25,-58,-68, 
  /* [16][2][][] */ -15,29,33,-18,-76,-68,-42,-64,-9,60,-7,-47,-74,79,66,-21, 0,-62,-67,59,-91,14,-62,8,42,-59,-87,33,-127,-66,-21,73, -14,-21,76,-21,-39,-23,56,-45,72,23,-73,-4,-16,-16,-16,52, 
  /* [17][0][][] */ 8,-27,-13,2,10,-30,25,19,29,29,-27,-34,28,-27,0,29, 25,-18,0,23,-61,-21,29,13,51,-6,4,-44,27,-42,-37,-8, 29,33,28,-33,-11,18,9,-15,24,-7,-1,30,-8,-18,-12,-23, 
  /* [17][1][][] */ -2,11,-14,-16,-22,-19,-27,-19,6,-27,-1,8,8,16,-7,14, -16,-78,36,-4,4,-40,-17,2,21,-20,39,-21,-4,-127,19,-48, -31,-2,4,-19,-18,3,10,28,-11,13,-29,15,-28,25,18,8, 
  /* [17][2][][] */ 27,-25,19,-23,6,29,29,19,25,17,-2,-23,-33,13,29,25, 69,-72,20,-42,-49,-46,12,-8,-34,-67,34,-53,-16,-56,-12,-55, 12,32,10,-33,-21,16,6,-11,-23,2,-12,25,-7,20,-15,32, 
  /* [18][0][][] */ 15,-38,6,-39,-36,-25,11,-21,-13,-14,-20,27,-13,-4,38,25, 56,12,65,15,-52,-40,26,-8,18,-42,-12,-72,-34,-127,4,-108, -35,-18,-13,-30,37,36,-39,-23,-19,35,-1,4,-33,20,-33,38, 
  /* [18][1][][] */ -33,34,10,4,-33,-23,9,8,15,-32,-37,11,22,25,19,-10, 25,-41,51,3,-72,25,71,9,12,-82,13,-48,-22,-106,-38,-66, -32,3,-31,25,-15,20,-19,-28,-9,9,38,5,-34,1,-14,-22, 
  /* [18][2][][] */ -19,27,-28,4,-7,-28,17,-29,-22,-30,29,2,-2,4,13,23, 42,-80,23,-32,0,-5,-41,-2,-21,1,43,-19,39,-63,-57,-85, 19,2,29,-27,9,31,4,0,35,-34,0,-32,-22,-12,22,-26, 
  /* [19][0][][] */ -3,48,75,-39,-77,-87,0,76,37,95,-89,83,-43,71,31,81, -52,-121,-80,-98,-46,-18,-73,-24,-66,-36,-20,106,9,-122,10,-104, -5,86,83,120,73,18,-55,-94,-33,-11,36,-61,18,-63,102,-33, 
  /* [19][1][][] */ -30,-121,-7,120,112,29,-86,107,8,-85,66,-35,23,-111,-22,-91, 38,11,-14,65,-118,-37,-68,-110,-65,-58,-28,-108,-55,-117,82,-127, 66,100,58,113,61,80,62,96,-84,-60,-118,85,-64,0,-103,108, 
  /* [19][2][][] */ -115,63,-117,-13,44,10,-76,81,42,109,-84,-109,117,35,-30,74, 13,20,-118,27,16,-116,-52,94,-61,82,-35,-61,-14,-117,-118,105, 12,108,-101,54,4,40,94,-87,-47,-50,28,100,60,93,-36,-34, 
  /* [20][0][][] */ -11,37,-7,29,-43,-42,3,0,40,9,10,-15,-26,5,-30,0, -37,11,50,10,-3,38,38,-21,35,32,27,-41,18,-16,7,31, 11,33,22,9,-37,-22,-13,37,-46,44,-3,-10,5,39,-17,-22, 
  /* [20][1][][] */ 31,-5,-42,33,-29,-22,11,8,12,32,-37,17,15,-30,-20,44, 46,-114,-22,25,-34,-43,-14,35,-19,-7,29,-38,-42,-79,-70,-62, 42,26,14,31,-41,5,30,0,-29,4,14,-36,24,-42,40,-14, 
  /* [20][2][][] */ -39,-21,-28,1,-39,-18,20,-30,24,-38,-22,-19,-37,-17,21,-16, 44,-21,-13,-16,28,-12,127,75,-81,-75,-52,-43,3,-57,27,3, -43,-11,8,-6,-9,43,-15,-46,7,9,3,-10,40,-13,34,-23, 
  /* [21][0][][] */ 20,65,38,32,11,52,-7,20,14,58,60,29,58,-39,32,31, -38,20,93,77,-127,40,45,37,-21,20,44,33,-3,-26,-57,-36, 27,-41,54,-26,25,13,-61,-41,27,-47,-55,54,-49,7,3,27, 
  /* [21][1][][] */ -28,-42,21,22,-51,-46,46,-44,10,18,47,-38,-53,-54,67,-23, 75,-72,24,-12,25,-18,-23,-7,-9,53,45,-20,4,34,15,-31, -5,36,-27,24,18,29,54,65,6,-2,-3,5,43,-65,-32,64, 
  /* [21][2][][] */ -35,22,15,-51,-10,-28,54,19,-26,-49,-67,-26,40,60,18,0, 71,7,-4,96,5,-12,7,11,31,47,-76,-10,44,75,47,-1, 29,67,2,-48,55,-59,-30,-40,-34,-67,-16,-46,-61,-16,-64,18, 
  /* [22][0][][] */ 19,-36,17,19,22,-25,24,39,8,45,-4,10,8,-40,-16,-25, -20,28,32,30,-6,84,36,-8,26,-19,-8,-29,21,-11,19,7, 6,-44,-17,36,-31,39,40,3,-25,13,-12,-38,36,38,-46,-31, 
  /* [22][1][][] */ 8,27,23,-44,-47,-45,-36,-33,-8,45,-20,-14,-5,16,15,-45, -46,-12,-25,38,-46,-33,-5,-29,56,-19,-7,15,65,26,4,56, -6,40,38,-37,-22,48,1,30,-7,34,-5,48,41,48,-18,-18, 
  /* [22][2][][] */ -4,36,14,40,-7,-1,26,-37,20,-40,39,-1,-25,31,15,-47, -40,-4,-10,-7,55,-39,104,31,-127,35,-76,45,7,11,3,40, 11,15,-33,19,14,9,45,-24,-19,-40,8,-44,39,-31,12,49, 
  /* [23][0][][] */ -8,6,94,-46,-34,-87,-28,9,42,-56,-47,45,46,21,-27,-51, 23,-50,8,-66,-99,92,18,48,87,-117,-64,-68,-77,17,-52,8, -81,-90,-16,78,-93,37,6,-76,-4,67,32,74,-31,-8,33,44, 
  /* [23][1][][] */ -36,-29,-26,-77,17,73,-77,29,25,-82,-6,-9,75,-14,77,-95, 103,-95,-77,-71,56,-12,-39,-85,40,-127,9,2,22,-68,44,-86, -77,-23,-9,23,68,12,-87,-8,-27,-14,12,19,-50,54,95,-34, 
  /* [23][2][][] */ 21,43,88,-52,82,34,-55,72,-50,81,-95,73,32,-25,37,23, 44,14,-94,58,78,-34,-24,-81,-7,-14,-11,-121,35,117,-6,92, 52,81,18,-9,-59,-82,-87,-38,-60,48,-67,-90,56,-13,-56,53, 
  /* [24][0][][] */ -59,73,-58,18,-19,-70,-42,3,42,-8,-62,-66,-35,-33,-7,-20, -15,-89,11,64,-42,-35,-46,93,56,76,62,-7,58,-124,56,42, -28,74,58,81,67,63,-4,60,22,10,63,34,44,-80,30,-75, 
  /* [24][1][][] */ 76,-44,-19,25,-76,-17,-30,-19,-63,-48,72,-56,-45,-18,-81,-57, -53,-61,64,-21,11,-3,1,72,2,-51,-55,-77,99,115,-46,52, 4,-35,56,33,-23,39,-14,-64,72,-26,-54,69,-74,75,-69,-30, 
  /* [24][2][][] */ 48,59,-60,-34,-27,-40,-79,70,44,-16,34,-28,-61,-9,-29,-46, 5,127,-43,46,-65,69,28,74,-73,100,-79,33,-73,17,49,28, 11,-69,-78,-52,18,6,-58,-69,35,-28,10,19,4,54,42,81, 
  /* [25][0][][] */ 52,-55,8,-15,-22,36,-56,-33,-45,54,-61,46,72,72,28,29, 31,-33,-15,50,69,40,-29,-83,33,-101,-33,-80,61,29,24,44, -58,10,19,-52,68,8,41,-34,-49,-54,30,15,57,4,-4,31, 
  /* [25][1][][] */ -57,-38,60,-75,55,-50,-62,-73,-74,-36,20,42,50,-3,50,-14, 12,12,51,41,-25,52,86,53,-104,18,-127,-18,-116,-43,-33,105, 32,61,55,-69,-39,-75,-60,-18,5,-45,54,-65,-17,28,68,-35, 
  /* [25][2][][] */ 37,59,-11,55,-63,-52,6,13,5,55,62,-29,-6,-15,34,-10, -66,55,49,113,-45,63,-74,-27,8,-37,87,15,-2,105,-48,-5, -67,-8,43,22,-15,11,-53,39,-37,-53,-59,69,10,-53,58,-55, 
  /* [26][0][][] */ 9,34,-37,-28,34,8,10,19,25,10,29,-3,0,33,-35,22, -34,60,-42,76,-35,-26,18,-22,45,27,22,-25,26,50,14,53, -11,-40,-21,20,-42,23,49,25,47,12,-8,-49,-37,3,39,7, 
  /* [26][1][][] */ 30,-21,0,9,-31,-45,16,50,17,-39,32,22,-1,39,-50,-35, 7,52,51,-13,73,-48,-3,42,-37,2,-8,55,7,-26,-17,-20, 36,-49,-15,44,-4,0,5,-2,-27,22,5,-4,-7,-24,16,-24, 
  /* [26][2][][] */ -23,29,-50,49,-26,-7,-43,7,36,-19,14,-14,-4,-26,-42,41, 4,39,-52,-44,-60,-42,-12,10,74,-5,-10,12,-49,-41,-127,-54, 13,-22,-22,13,-2,51,-27,-5,-20,44,-15,-23,11,-39,-48,45, 
  /* [27][0][][] */ -9,-14,-19,-66,-12,19,-47,-66,42,-41,6,30,6,-66,-61,-18, 12,-71,-26,-48,84,-127,40,-31,-13,85,21,21,78,-65,-55,-38, -26,18,-23,22,33,55,18,-54,67,14,51,-38,37,38,21,-28, 
  /* [27][1][][] */ 65,-60,52,22,52,-16,-10,-4,-31,53,29,-10,-35,-32,59,-21, -104,-108,8,-50,28,30,33,52,96,-104,16,-123,-34,36,19,35, -66,-9,15,15,65,1,19,39,-47,-3,53,-64,-52,-7,-50,22, 
  /* [27][2][][] */ 66,32,-66,-18,36,41,-37,62,18,5,-62,-38,49,2,-11,14, 47,60,-70,11,-13,39,-34,-13,-64,-27,19,66,-68,29,41,25, 24,-20,-3,62,9,-61,5,-53,1,28,59,-64,13,-46,-66,-24, 
  /* [28][0][][] */ 4,0,34,3,-10,-5,-22,33,11,35,33,6,-28,11,21,14, 70,-2,-17,-76,-46,-13,21,29,-58,-20,-23,-56,-31,-95,3,-38, 35,-21,-27,22,4,-5,-26,16,1,-2,20,-26,-32,30,-6,-17, 
  /* [28][1][][] */ 8,8,-30,-5,-4,19,-22,28,-14,5,10,-22,-30,11,-33,-21, 34,16,44,7,-38,-18,59,25,48,-34,57,-66,-18,-38,-40,-55, -16,32,30,28,17,-9,-1,-5,5,31,35,-10,18,-35,27,-20, 
  /* [28][2][][] */ 10,-25,-2,-32,-5,15,-34,-11,6,-16,-14,-19,7,22,23,-33, 49,-86,7,-14,9,-23,50,9,-31,-103,-18,-6,5,-127,-30,-81, -24,30,-18,14,3,21,-13,18,-33,-14,-10,-8,-9,-10,18,19, 
  /* [29][0][][] */ -20,14,-10,2,-23,14,39,-19,-11,-12,29,-33,39,-42,25,-2, 22,-9,23,-39,-48,-54,29,15,23,31,-22,-42,29,5,-13,25, 11,-37,4,40,-14,29,12,-40,35,16,-41,30,-8,-32,8,-23, 
  /* [29][1][][] */ 42,-22,-39,35,-34,-9,-34,26,8,-33,-19,14,-32,20,4,35, 1,-24,50,-4,-36,24,-9,36,-24,-41,34,-2,51,-25,59,-6, -29,-28,0,-23,-8,35,-2,32,-38,31,-37,-3,3,-24,-20,1, 
  /* [29][2][][] */ -5,5,25,23,34,-30,-3,24,-27,-41,26,17,27,3,18,-31, 55,-35,-7,56,-15,-54,-10,16,18,-50,44,-20,-36,-127,-51,-99, 32,8,1,-35,-18,23,33,-29,-26,35,33,23,12,33,31,36, 
  /* [30][0][][] */ -10,52,9,41,-40,54,-25,44,30,-34,-30,27,10,56,47,-11, -10,75,30,13,-57,44,32,13,10,18,-34,24,57,13,15,12, 34,53,21,28,-18,-44,-11,-9,-59,-20,-31,-53,31,20,-9,-38, 
  /* [30][1][][] */ -20,4,38,-29,17,41,35,52,57,38,13,-25,-8,0,-24,-19, -39,2,-60,30,35,-56,75,61,-27,-6,-3,80,39,22,-11,-36, -7,22,-18,-8,13,28,-5,-36,-53,54,7,21,15,-9,-52,-19, 
  /* [30][2][][] */ 1,10,-39,-24,-37,53,-23,-12,-13,49,-54,12,3,-39,-13,1, -127,-67,-29,-51,-46,0,2,-38,92,-7,28,-89,-38,-27,-28,26, -39,-42,-11,-51,18,-1,-17,-34,-43,-55,30,-37,-29,25,-5,-44, 
  /* [31][0][][] */ -92,33,36,-11,28,-89,46,-90,-55,-93,-38,-49,68,-98,20,-30, 48,-106,119,57,51,-5,19,25,117,-42,-32,18,52,114,116,-49, 24,82,-15,-64,97,29,-87,-6,69,42,-61,50,20,-103,4,41, 
  /* [31][1][][] */ 74,-21,53,-86,-85,101,-37,60,62,31,-75,-30,-80,50,-76,11, -89,95,78,9,71,-55,30,10,-5,85,-112,26,63,-65,-78,58, -31,11,31,81,36,61,81,86,11,-102,92,51,77,-77,-12,-92, 
  /* [31][2][][] */ 84,13,53,-101,-104,-47,-85,-60,-37,-55,-35,33,-37,71,-72,39, -15,16,-1,48,34,-35,68,62,-98,-29,-122,127,-52,39,-67,71, -57,-45,-87,5,79,-97,-10,35,-3,-11,-57,72,-20,-34,60,9, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,3,3,16 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0016895474400371313, 0.0016157582867890596, 0.0015750658931210637, 0.0016619317466393113, 0.0018529859371483326, 0.001386056886985898, 0.0020785452798008919, 0.0013583222171291709, 0.0021428894251585007, 0.0017645580228418112, 0.0017436863854527473, 0.0020221197046339512, 0.0021200352348387241, 0.0019031186820939183, 0.0015106925275176764, 0.0015189070254564285, 0.0014027699362486601, 0.0034756171517074108, 0.0029851782601326704, 0.00096154236234724522, 0.0025402186438441277, 0.0017291380790993571, 0.0023508288431912661, 0.0012096946593374014, 0.0014478999655693769, 0.0015136187430471182, 0.0022755279205739498, 0.0016528517007827759, 0.0032762791961431503, 0.0027485473547130823, 0.0019935385789722204, 0.0011247398797422647, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[32] = { -1319, -964, -519, 1174, -147, -1980, 9, -253, 736, 732, -1062, -62, -501, 8, -6, -181, -816, 335, 1, -44, -378, -1309, -395, -97, -817, -808, -166, 257, 344, -366, -163, -939, };
const TfArray<1, int> tensor_dimension8 = { 1, { 32 } };
const TfArray<32, float> quant8_scale = { 32, { 0.00013464689254760742, 0.00012876633263658732, 0.00012552339467220008, 0.00013244607544038445, 0.00014767196262255311, 0.00011046049621654674, 0.0001656476961215958, 0.0001082502058125101, 0.0001707755436655134, 0.00014062479021959007, 0.00013896143354941159, 0.00016115092148538679, 0.00016895421140361577, 0.00015166724915616214, 0.00012039321154588833, 0.00012104785855626687, 0.00011179242574144155, 0.00027698601479642093, 0.00023790096747688949, 7.6629206887446344e-05, 0.0002024403220275417, 0.00013780202425550669, 0.00018734709010459483, 9.6405470685567707e-05, 0.00011538901890162379, 0.00012062641326338053, 0.00018134604033548385, 0.00013172245235182345, 0.00026109997997991741, 0.00021904287859797478, 0.00015887316840235144, 8.9635082986205816e-05, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[4*416] = { 
  3, 24, -19, 16, -1, -21, 11, 45, 31, -30, -35, 22, 20, 22, 28, -5, 1, 13, 7, 16, 28, 4, -8, -37, 34, 6, -18, 31, -2, -16, -22, 35, 4, 30, -14, 16, -3, 3, -8, -5, -18, -4, -18, 6, -25, -6, 18, 1, -13, -14, -21, 21, -18, 24, -70, -19, -27, -1, 2, 8, -17, 2, 21, -17, 89, 24, -12, -21, 33, 21, 8, 59, 41, 10, 9, 17, 27, -5, 10, 1, -7, -14, 0, 3, 1, -4, 25, 31, -14, 32, 2, 8, -35, 3, -20, -7, -4, -5, -15, -100, -12, 35, 17, 14, 30, -7, 23, 8, -3, 13, 5, -9, 0, 10, 18, 10, 32, 21, 40, -13, -22, -9, 14, 28, 1, 0, 12, 23, -43, 10, 30, 0, -46, 14, -17, 23, -21, -5, 4, 16, 21, 10, 9, -5, -3, 38, 18, -18, 9, 8, 28, 0, 33, -19, -1, -8, 1, -15, 17, 7, 2, -2, 23, -22, -8, 13, 61, 7, -22, -26, -14, -29, 16, 43, 1, -14, -37, 8, 9, 0, 38, -7, -19, 24, -43, 13, 34, -77, 34, 11, -38, -2, -10, 8, 28, -71, -5, -9, 27, 38, -33, -105, 6, -83, 35, 17, 2, -31, 19, 37, 61, 10, 29, 19, -8, 34, 22, 34, -22, 22, 33, -16, 14, 8, 28, 8, 28, -53, 13, 27, 10, -89, 8, -6, 20, 22, 23, -21, -15, 0, 39, 25, 32, -31, 38, 14, 14, 17, 14, -5, -4, -56, -3, 6, 6, 14, 15, -44, -11, -40, -12, 4, 7, -16, -5, -16, 19, -18, 22, 30, -12, -11, -14, -45, -25, -14, -36, 23, 24, 4, 29, -12, -8, 26, -7, -24, 32, 1, 3, -28, -54, 62, 18, -37, -30, 7, 21, 49, -11, 18, -12, -48, -20, 0, -38, -26, -41, 23, 15, -20, 26, -30, -13, -2, 33, -3, -111, -18, 52, 17, -25, -46, -45, 41, -22, -29, -43, -32, 81, 18, -2, 8, -30, -32, 4, 1, -32, -59, -67, -21, -41, -29, -23, 44, -38, -33, 28, 30, -31, -76, 57, 5, -17, -88, -13, 101, -37, -47, -43, -58, 35, 71, 12, 36, -49, -72, -63, 14, -34, -80, -79, 24, -42, -72, 11, -21, -50, -51, 33, -61, -52, -87, 9, -1, -69, -85, -53, 23, -111, -75, -92, 28, -90, -17, -87, -31, -90, -27, 17, -27, -21, -85, -78, 33, -46, -76, -48, -12, -32, -73, -82, 22, -76, -110, -60, -75, 
  -11, -20, 1, -10, -20, -27, 24, 12, 14, 24, -36, 20, -18, -19, -34, 24, 21, 34, 0, 4, -4, -22, -9, 14, -18, 26, 16, -8, -13, 19, 11, -6, 9, -10, -31, 17, -17, 4, -8, -3, 17, 36, 28, 26, -30, 35, -4, -8, -22, 41, 7, 22, -48, 35, -66, 28, -37, 10, 7, -32, -11, -16, -4, 9, -31, 27, 14, 5, 52, 22, 5, -39, -2, 11, -15, 23, -22, -22, -15, -22, 11, -17, -1, -33, 11, 10, -2, 10, 8, -20, 16, -19, 12, -18, 30, 5, -65, -24, -2, 41, 47, -9, -13, -48, 31, -51, -7, 3, -25, -32, 2, -30, -40, -2, -17, 11, -26, -3, -36, 30, -15, 6, -11, -31, -2, -6, -28, -32, 23, 16, -13, -6, -20, -17, -16, 55, 52, 42, 9, 15, -4, 18, 2, -50, 34, 12, 2, 13, -39, 1, -7, 26, -6, -9, 4, 25, -27, -18, -6, -20, 29, -49, 10, -10, 40, 29, -14, -44, 19, 64, 41, 14, 57, -22, -9, -3, 10, -28, -48, -7, -26, -3, -5, 10, 34, 53, 14, 50, -61, 9, 28, 1, 24, 2, -35, 84, 27, -30, -59, -39, 62, -3, 20, -47, -22, 10, -45, 54, 0, -7, -74, -6, 33, 13, -21, -38, -8, -21, 67, -42, -6, -6, 0, 14, -60, -28, -13, -93, -64, -36, 53, 123, 58, -24, -54, -31, -17, 58, 75, -30, -29, -42, -77, 15, 13, -36, -61, -6, -2, -19, -65, 55, -46, 58, -5, -23, -27, 63, 35, -16, -10, 40, 36, 10, -72, -16, -34, 49, -47, 75, 8, -48, 4, 69, 69, 5, 87, 41, -47, -9, -5, -26, -47, -17, 89, 23, -42, -35, -46, -3, 0, -97, 74, 10, 77, 15, -127, -70, -75, -81, -42, 47, 33, 4, 39, 76, 112, 10, -37, 25, -79, -31, -61, -52, 9, -62, 109, 62, -88, -47, -29, 46, 48, -55, -96, 19, 3, -49, -124, 58, -27, 50, -35, 28, 44, 20, -32, 63, 41, -11, 39, 19, -33, 38, -10, -37, 27, -20, -3, 29, -21, 12, -46, 13, 17, -13, 29, -35, 16, -9, -100, -39, -75, 48, -32, -7, 38, 28, 8, 71, 4, -11, 31, -16, -66, -10, -36, 5, -33, 25, -5, 20, -5, -21, -48, 5, 27, 1, 0, 6, -4, -57, -78, 22, -19, -4, -27, 10, 14, -57, -23, 31, 49, -28, 19, 13, -51, 23, -33, -20, 20, -33, 56, -4, -22, -36, 
  -66, -48, -57, -55, -80, -70, -47, -26, 68, 20, -69, -52, -51, -22, 4, 21, -53, -21, -36, 1, -51, -39, -91, 17, -27, 29, -4, 2, -42, -51, 13, -105, -29, 59, -50, -8, -12, -21, -26, -40, -30, -26, -39, 34, 12, -8, 4, -3, -34, 53, -28, 11, 96, -6, 88, 22, -18, -26, 19, 46, -24, -17, -47, 2, -30, -7, -43, 53, -27, 1, 7, -31, -34, -57, -56, -15, 7, -32, -17, 12, -38, -24, -14, -4, -22, -23, -61, 2, -57, -11, -43, -26, 91, -30, 23, -17, -24, -16, -15, 50, 22, 18, -22, 5, -3, -36, -3, -20, 11, -9, -30, 11, -17, 8, -5, -24, -32, -8, -23, -38, -16, -13, -11, -9, -11, -15, -25, -20, 27, 4, -18, -43, -24, -4, 1, 61, 30, -72, -15, -14, 22, -14, 49, 12, 59, 8, 4, 1, -8, -6, 20, -11, -37, 28, -45, 16, 11, 42, 11, -18, 7, 4, -6, -9, 32, 19, 36, 34, 36, 11, 21, -5, 19, -4, 45, 2, 38, 12, 16, -12, 63, 35, 21, -7, 50, 41, -2, 15, 16, 21, -23, 40, 27, 14, 7, -64, 24, 15, 43, 44, -17, -20, 47, 37, 21, -1, 32, 1, 35, 11, 25, 3, -26, 2, -3, -19, 35, 19, -8, 23, 29, 20, 25, 36, 20, -2, 29, 41, 16, 0, -20, -123, -9, 6, 4, -22, 18, -42, -75, 0, 22, 13, 36, 16, 29, 1, 20, -15, 1, -8, 53, -31, 51, -5, 42, 30, 6, 1, -47, 28, -28, -1, 12, -126, 0, 67, 22, -28, -3, 40, 15, 11, -4, -17, 20, 17, -3, -18, 18, 5, 12, -33, -14, 2, -31, -60, 4, -4, -12, -4, -50, -37, -7, -15, -33, 3, -36, -75, -8, -37, 29, 37, 4, -13, 6, 4, -62, 5, 1, -7, 2, 4, 10, 38, -31, 45, 3, -10, 15, 4, 20, -19, 14, 30, 23, 10, 17, -20, -16, -59, 29, -35, -10, -19, -32, 1, 1, 11, -15, 27, 32, 2, 7, 29, -7, 5, -23, 2, 28, 13, -23, 54, 2, 6, -13, -37, -13, 12, 9, 28, -14, -68, 39, -69, 36, 11, 28, 27, 39, 13, 51, -4, 0, 18, 10, -23, 31, -2, -51, -17, 4, 14, 2, 19, 19, 38, -11, 24, 8, 10, 66, 19, -6, -15, 23, 45, 31, 20, -57, 43, 18, 34, 63, 24, -11, 13, 27, -7, 15, 22, 29, -59, 43, 56, 54, 13, 
  54, 48, 24, -53, 68, 14, 1, -7, -77, -103, 29, 45, -22, 1, -38, -28, 37, 12, 28, 1, 33, 20, 17, 5, 29, -33, -33, 4, 11, 6, -3, 20, 28, -51, -6, -5, 17, 4, -11, -20, 8, -16, 0, -15, 12, 9, 19, -27, -8, -18, -12, -32, -93, 24, -87, 1, -28, 19, 1, -24, -15, -1, 32, 2, -85, 18, -1, -38, 36, 22, -12, -40, -11, 31, 24, 19, 29, -10, -3, 2, 5, -19, 2, 8, -9, 8, 18, 13, -12, 34, -14, 36, -56, -15, 4, 26, -25, -5, -9, -61, -35, 34, -4, -1, -10, -5, 22, 7, 27, -3, 1, -26, -1, 4, 7, 12, 5, 11, 19, -31, 4, 0, 30, -10, -10, -8, -2, -12, 30, 7, 4, 32, 47, 10, -20, -22, -76, 3, 25, 8, -30, -25, -73, 8, -10, 5, 19, 25, -2, -5, 23, 1, 14, -21, 27, -61, -31, -53, 34, 5, -46, -8, -2, -23, -38, -34, -41, -38, -3, 16, -31, -52, -56, -5, -31, -24, -39, -37, -28, -18, -35, -30, -41, -11, -12, -20, 3, -31, -82, -33, 36, -39, -35, -34, -64, 6, -52, -51, -15, -6, 5, 91, -26, 53, -36, -59, -4, -2, -6, -44, -68, 17, -27, -58, -29, -47, 2, -39, -60, -40, -44, -22, 25, -8, -3, -37, -13, -59, -12, -18, -63, 15, -22, 8, -17, -12, -13, -39, -35, -49, -45, -12, -43, 35, 0, -40, 5, 19, -16, -30, -4, -1, -13, -33, -24, -4, -11, -41, -2, 24, -45, -11, -35, 69, -33, -30, 12, 17, 32, -27, -31, 9, 28, -60, -71, -19, -35, -26, 12, -11, -3, 17, -43, -26, -56, -4, -24, -33, -7, 30, -7, 44, -18, -13, -28, 15, -16, 10, -12, 39, 16, -11, -15, 17, 1, -25, -37, -23, 49, -10, 10, 18, -8, 20, 14, 17, -63, 12, 20, 21, 18, -32, -9, 10, 0, 7, 18, -9, -23, -41, 20, -30, -13, -21, -44, 10, 13, -6, -20, 7, 6, -14, -5, -9, -27, -9, -57, 5, 23, -29, -39, 31, 21, -1, -34, -82, -8, 3, 9, -6, 29, -79, 39, -108, 36, 5, 18, 0, 31, -59, -19, -33, -52, 9, 21, 30, 27, -6, 21, 40, -35, -23, -4, 16, 25, 37, -1, -5, 2, 15, -32, 19, -9, -33, 32, -24, 36, -42, 27, 39, 8, 9, 19, 7, 20, 14, 23, -2, 6, 25, 19, -18, -38, 31, 54, 15, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 4,416 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0033324388787150383, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[4] = { 82, 342, 506, -738, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0001203776992042549, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,104,1,1 } };
const TfArray<1, float> quant11_scale = { 1, { 0.38646602630615234, } };
const TfArray<1, int> quant11_zero = { 1, { -102 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,104,1,8 } };
const TfArray<1, float> quant12_scale = { 1, { 0.11880471557378769, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,52,1,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.11880471557378769, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,52,1,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.079694055020809174, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,26,1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.079694055020809174, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,26,1,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.03612300381064415, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.03612300381064415, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,416 } };
const TfArray<1, float> quant18_scale = { 1, { 0.03612300381064415, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,4 } };
const TfArray<1, float> quant19_scale = { 1, { 0.13350382447242737, } };
const TfArray<1, int> quant19_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,4 } };
const TfArray<1, float> quant20_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 11,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 12 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 13,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,7,8 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 16 } };
const TfArray<1, int> outputs6 = { 1, { 17 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 17,2 } };
const TfArray<1, int> outputs7 = { 1, { 18 } };
const TfLiteFullyConnectedParams opdata8 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs8 = { 3, { 18,9,10 } };
const TfArray<1, int> outputs8 = { 1, { 19 } };
const TfLiteSoftmaxParams opdata9 = { 1 };
const TfArray<1, int> inputs9 = { 1, { 19 } };
const TfArray<1, int> outputs9 = { 1, { 20 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 104, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1664, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension11, 104, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension13, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1408, (TfLiteIntArray*)&tensor_dimension15, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension17, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension19, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 21;
  for (size_t i = 0; i < 21; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 10; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 10; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  20, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 10; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
